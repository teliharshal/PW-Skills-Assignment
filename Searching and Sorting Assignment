public class BinarySearch {
    static boolean binarySearch(int[] a, int target){
        int n = a.length;
        int st = 0, end = n-1; // 0 based indexing
        while(st <= end){
            int mid = (st + end)/2;
            if(target == a[mid]){
                return true;
            } else if(target < a[mid]){
                end = mid-1;
            } else {
                st = mid+1;
            }
        }
        return false;
    }
    static boolean recBinarySearch(int[] a, int st, int end, int target){
        if(st > end) return false; // base case
        int mid = (st + end)/2;
        if(target == a[mid]){
            return true;
        } else if (target < a[mid]){
            return recBinarySearch(a, st, mid-1, target); // subproblems
        } else {
            return recBinarySearch(a, mid+1, end, target); // subproblems
        }
    }

    public static void main(String[] args) {
        int[] a = {1, 2, 3, 4, 5};
        int target = 0;
        while(target != 10) {
            System.out.printf("%d exists in arr: %b \n", target, recBinarySearch(a, 0, a.length-1, target));
            System.out.printf("%d exists in arr: %b \n", target, binarySearch(a, target));
            System.out.println();
            target++;
        }
    }
}

// ---------------------------------------------------------------------------------------------------
public class FindSquareRoot {
    static int sqrt(int x){
        int st = 0, end = x;
        int ans = -1;
        while (st <=end){
            int mid = st + (end-st)/2;
            int val = mid * mid; // use long here to avoid overflow
            if(val == x){
                return mid;
            } else if(val < x){
                ans = mid;
                st = mid+1;
            } else {
                end = mid-1;
            }
        }
        return ans;
    }

    public static void main(String[] args) {
        int x = 25;
        System.out.println(sqrt(x));
    }
}
// -------------------------------------------------

public class FindSquareRoot {
    static int sqrt(int x){
        int st = 0, end = x;
        int ans = -1;
        while (st <=end){
            int mid = st + (end-st)/2;
            int val = mid * mid; // use long here to avoid overflow
            if(val == x){
                return mid;
            } else if(val < x){
                ans = mid;
                st = mid+1;
            } else {
                end = mid-1;
            }
        }
        return ans;
    }

    public static void main(String[] args) {
        int x = 25;
        System.out.println(sqrt(x));
    }
}
// ------------------------------------------------------
public class Main {
    static int findSquareRoot(int x) {
        int st = 0, end = x, ans = -1;
        while (st <= end) {
            int mid = st + (end - st) / 2;
            int val = mid * mid; // you can use long to avoid overflow error
            if (val == x)
                return mid;
            else if (val < x) {
                ans = mid;
                st = mid + 1;
            } else
                end = mid - 1;
        }
        return ans;
    }
    static int firstOcc(int[] a, int val){
        int st = 0, end = a.length-1;
        int fo = -1;
        while(st <= end){
            int mid = st + (end-st)/2;
            if(val == a[mid]){
                fo = mid;
                end = mid-1;
            } else if(val < a[mid]){
                end = mid-1;
            } else {
                st = mid+1;
            }
        }
        return fo;
    }
    static boolean recBinarySearch(int[] a, int st, int end, int val) {
        if (st > end) return false;
        int mid = (st + end) / 2; // find middle element of the array
        if (a[mid] == val)
            return true; // value found
        else if (val < a[mid])
            return recBinarySearch(a, st, mid - 1, val);
        else
            return recBinarySearch(a, mid + 1, end, val);
    }

    static boolean binarySearch(int[] a, int val) {
        int n = a.length;
        int st = 0, end = n - 1; // 0 based indexing
        while (st <= end) {
            int mid = (st + end) / 2; // find middle element of the array
            if (a[mid] == val)
                return true; // value found
            else if (val < a[mid])
                end = mid - 1;
            else
                st = mid + 1;
        }
        return false; // value not found in the array
    }

    public static void main(String[] args) {
        int[] a = {1, 2, 3, 4, 5};
        int val = 16;
        while(val != 30){
            System.out.printf("sqrt of %d is %d\n", val, findSquareRoot(val));
            int fo = firstOcc(a, val);
//            System.out.printf("First occurrence of %d is %d\n", val, fo);
//            System.out.println(binarySearch(a, val));
//            System.out.println(recBinarySearch(a, 0, a.length-1, val));
            val++;
        }
    }
}
// --------------------------------------------------------------------------------

public class Sort012 {
    static void display(int[] num){
        for(int val : num){
            System.out.print(val + " ");
        }
        System.out.println();
    }
    static void swap(int[] a, int x, int y){
        int temp = a[x];
        a[x] = a[y];
        a[y] = temp;
    }
    static void sort012(int[] a){
        int lo = 0, mid = 0, hi = a.length-1;
        //explore the unknown region
        while(mid <= hi){
            if(a[mid] == 0){
                swap(a, mid, lo);
                mid++;
                lo++;
            } else if(a[mid] == 1){
                mid++;
            } else {
                swap(a, mid, hi);
                hi--;
            }
        }
    }

    public static void main(String[] args) {
        int[] num = {2, 2, 0, 0, 1, 1, 2, 0, 1, 0};
        sort012(num);
        display(num);
    }
}

// ---------------------------------------------------------------------------
public class SortArr {
    static void display(int[] num){
        for(int val : num){
            System.out.print(val + " ");
        }
        System.out.println();
    }
    static void sortArr(int[] num){
        int n = num.length;
        int x = -1, y = -1;
        if(n <= 1){ // corner case, edge case
            return;
        }
        //process all adjacent elements
        for(int i = 1; i < n; i++){
            if(num[i-1] > num[i]){
                if(x == -1){ // first conflict
                    x = i-1;
                    y = i;
                } else { // 2nd conflict
                    y = i;
                }
            }
        }
        // swap x, y in num
        int temp = num[x];
        num[x] = num[y];
        num[y] = temp;
    }

    public static void main(String[] args) {
        int[] num = {3};
        sortArr(num);
        display(num);
    }
}

// ----------------------------------------------------------------------------------------------
public class SortPosNeg {
    static void display(int[] num){
        for(int val : num){
            System.out.print(val + " ");
        }
        System.out.println();
    }
    static void partition(int[] num){
        int l = 0, r = num.length-1;
        while(l < r){
            while(num[l] < 0) l++;
            while (num[r] >= 0) r--;
            if(l < r){
                int temp = num[l];
                num[l] = num[r];
                num[r] = temp;
                l++;
                r--;
            }
        }
    }

    public static void main(String[] args) {
        int[] num = {-13, 20, 7, 0, -4, -13, 11, -5, -13};
        partition(num);
        display(num);
    }
}
// --------------------------------------------------------------
